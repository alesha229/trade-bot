// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/ 
//@version=5

indicator('GG-Shot [Plexsure]', overlay=true, max_labels_count = 500)



//TOOLTIPS



tooltip01 = 'Settings presets are divided into 3 groups: \n\nOriginal settings presets. To use them, you need to select a pair and TF in accordance with the name of the preset. The settings were selected by the author of GG-Bang, you can use them for comparison with the original, or when getting acquainted with the indicator. The settings of basic presets cannot be changed \n\nAdaptive presets. They can be used on any pair and timeframe. All settings are selected automatically based on the most profitable, or the most optimal at the current time. The ratio of TP and SL, their style can be changed in the manual settings section \n\nManual settings. They can be used on any pair and timeframe. You select all settings manually in the manual settings section. The sensitivity of signals, TP and SL, their style can be changed in the manual settings section'
tooltip02 = 'Trading modes. Affects only the visual display of TP: \n\nStandart - displays limit take profit lines and dynamic take profit marks \n\nAdvanced - displays a trading channel with zones for taking profits'
tooltip03 = 'Oscillator operating modes (additional signals in the form of plus signs on the chart): \n\nStandart - signals are always issued, as usual \n\nBy Trend - signals are issued only according to the trend. That is, if the trend is upward (trend line is green), we only receive buy signals (green pluses)'
tooltip04 = 'Backtest panel modes: \n\nDesktop - backtest panel for PC \n\nDesktop (Larger font) - backtest panel for PC with larger font size \n\nMobile - backtest panel for mobile devices (as in old versions)'
tooltip05 = 'Intensity of additional signal filtering. With a value of 0, filtering is disabled, the maximum value is 3 \n\nIt only affects the processing of current signals (in the case of using adaptive presets), that is, turning on filtering will not affect the calculation of the best, optimal and worst settings, they will be calculated without taking into account filtering, and the result of these calculations (final signals) will undergo additional filtering'



//INPUTS



PRtype = input.string(       title = 'Settings Preset', options = ['BTC/USDT - 3h | Long-Term', 'BTC/USDT - 1h | Mid-Term', 'BTC/USDT - 30m | Mid-Term', 'BTC/USDT - 15m | Short-Term', 'BTC/USDT - 5m | Scalp', 'ETH/USDT - 3h | Long-Term', 'ETH/USDT - 1h | Mid-Term', 'ETH/USDT - 30m | Mid-Term', 'ETH/USDT - 15m | Short-Term', 'ETH/USDT - 5m | Scalp', 'UNIVERSAL/USDT - 15m | Short-Term', 'UNIVERSAL/USDT - 5m | Scalp', 'WLD/USDT - 15m | Short-Term', 'WIF/USDT - 15m | Short-Term', 'TRB/USDT - 30m | Mid-Term', 'ARB/USDT - 30m | Mid-Term', 'APT/USDT - 30m | Mid-Term', 'AEVO/USDT - 30m | Mid-Term', 'SOL/USDT - 1h | Mid-Term', 'Manual'], defval='BTC/USDT - 1h | Mid-Term', tooltip = tooltip01)
TRtype = input.string(       title = 'Trading Mode'   , options = ['Standart', 'Advanced', 'Disable']                      , defval = 'Standart', tooltip = tooltip02)
OStype = input.string(       title = 'Oscillator Mode', options = ['Standart', 'By Trend', 'Disable']                      , defval = 'Standart', tooltip = tooltip03)
PNtype = input.string(       title = 'Backtest Mode'  , options = ['Desktop', 'Mobile', 'Disable'], defval = 'Desktop' , tooltip = tooltip04)
FILinp = input.int   (       title = 'Filter Algoritmh Intensity',                                   minval = 0, maxval = 3, defval = 0         , tooltip = tooltip05)
SUPinp = input.bool  (false, title = 'Support and Resistance zones'        )
ALRinp = input.bool  (false, title = 'Long and Short Opportunity'          )
DTPinp = input.bool  (true , title = 'Dynamic Take Profit'                 )

IN1    = input.int   (2100 , title = 'Input 1')
IN2    = input.float (6.6  , title = 'Input 2', step = 0.2, minval = 0.001, maxval = 10 )
TP1x   = input.float (2.3  , title = 'TP 1',    step = 0.1, minval = 0    , maxval = 100)
TP2x   = input.float (4.6  , title = 'TP 2',    step = 0.1, minval = 0    , maxval = 100)
TP3x   = input.float (6.9  , title = 'TP 3',    step = 0.1, minval = 0    , maxval = 100)
TP4x   = input.float (13.8 , title = 'TP 4',    step = 0.1, minval = 0    , maxval = 100)
SLTx   = input.float (2.3  , title = 'SL'  ,    step = 0.1, minval = 0    , maxval = 100) 



//TP AND SL



TP1 = 0.0
TP2 = 0.0
TP3 = 0.0
TP4 = 0.0
SLT = 0.0


if  PRtype == 'BTC/USDT - 3h | Long-Term'
    IN1 := 4999
    IN2 := 4.5
    TP1 := 4.5
    TP2 := 9
    TP3 := 14
    TP4 := 28
    SLT := 5

if  PRtype == 'BTC/USDT - 1h | Mid-Term'
    IN1 := 2100
    IN2 := 8
    TP1 := 2.3
    TP2 := 4.6
    TP3 := 6.9
    TP4 := 13.8
    SLT := 2.3

if  PRtype == 'BTC/USDT - 30m | Mid-Term'
    IN1 := 725
    IN2 := 5
    TP1 := 0.8
    TP2 := 1.6
    TP3 := 2.4
    TP4 := 4.8
    SLT := 0.8

if  PRtype == 'BTC/USDT - 15m | Short-Term'
    IN1 := 415
    IN2 := 8
    TP1 := 0.5
    TP2 := 1.0
    TP3 := 1.5
    TP4 := 3
    SLT := 0.5

if  PRtype == 'BTC/USDT - 5m | Scalp'
    IN1 := 270
    IN2 := 6
    TP1 := 0.2
    TP2 := 0.4
    TP3 := 0.6
    TP4 := 1.2
    SLT := 0.2

if  PRtype == 'ETH/USDT - 3h | Long-Term'
    IN1 := 4999
    IN2 := 6
    TP1 := 8
    TP2 := 16
    TP3 := 24
    TP4 := 48
    SLT := 7

if  PRtype == 'ETH/USDT - 1h | Mid-Term'
    IN1 := 1400
    IN2 := 5.5
    TP1 := 1.2
    TP2 := 2.4
    TP3 := 4.8
    TP4 := 7.2
    SLT := 1.3

if  PRtype == 'ETH/USDT - 30m | Mid-Term'
    IN1 := 850
    IN2 := 6
    TP1 := 0.8
    TP2 := 1.6
    TP3 := 2.4
    TP4 := 4.8
    SLT := 0.8

if  PRtype == 'ETH/USDT - 15m | Short-Term'
    IN1 := 480
    IN2 := 4
    TP1 := 1.2
    TP2 := 2.4
    TP3 := 4.8
    TP4 := 7.2
    SLT := 1.3

if  PRtype == 'ETH/USDT - 5m | Scalp'
    IN1 := 340
    IN2 := 7
    TP1 := 0.4
    TP2 := 0.8
    TP3 := 1.2
    TP4 := 2.4
    SLT := 0.4

if  PRtype == 'UNIVERSAL/USDT - 15m | Short-Term'
    IN1 := 350
    IN2 := 10
    TP1 := 0.8
    TP2 := 1.5
    TP3 := 2.3
    TP4 := 4.5
    SLT := 1

if  PRtype == 'UNIVERSAL/USDT - 5m | Scalp' 
    IN1 := 175
    IN2 := 7
    TP1 := 0.3
    TP2 := 0.6
    TP3 := 0.9
    TP4 := 1.8
    SLT := 0.3
    

if  PRtype == 'WLD/USDT - 15m | Short-Term' 
    IN1 := 490
    IN2 := 9
    TP1 := 2
    TP2 := 3.98
    TP3 := 6
    TP4 := 12
    SLT := 2.3

if  PRtype == 'WIF/USDT - 15m | Short-Term' 
    IN1 := 460
    IN2 := 7
    TP1 := 2
    TP2 := 3.98
    TP3 := 6
    TP4 := 12
    SLT := 2.3

if  PRtype == 'TRB/USDT - 30m | Mid-Term'  
    IN1 := 1700
    IN2 := 2
    TP1 := 2
    TP2 := 3.98
    TP3 := 6
    TP4 := 12
    SLT := 2.3

if  PRtype == 'ARB/USDT - 30m | Mid-Term' 
    IN1 := 400
    IN2 := 4
    TP1 := 1
    TP2 := 3
    TP3 := 5
    TP4 := 6.8
    SLT := 2.3

if  PRtype == 'APT/USDT - 30m | Mid-Term'
    IN1 := 800
    IN2 := 7
    TP1 := 1
    TP2 := 3.673
    TP3 := 6.6
    TP4 := 13
    SLT := 2.3

if  PRtype == 'AEVO/USDT - 30m | Mid-Term' 
    IN1 := 800
    IN2 := 6
    TP1 := 1
    TP2 := 3
    TP3 := 5
    TP4 := 6.8
    SLT := 2.3

if  PRtype == 'SOL/USDT - 1h | Mid-Term' 
    IN1 := 1700
    IN2 := 7
    TP1 := 2.3
    TP2 := 4.7
    TP3 := 7
    TP4 := 9.9
    SLT := 6

if  PRtype == 'Manual'
    IN1 := IN1 
    IN2 := IN2 
    TP1 := TP1x
    TP2 := TP2x
    TP3 := TP3x
    TP4 := TP4x
    SLT := SLTx



//FILTER ALGO



volumeBreak(thres)              => ta.hma(ta.rsi(volume, 14), 10) > thres
volatilityBreak(volmin, volmax) => ta.atr(volmin) > ta.atr(volmax)
minvol       = FILinp == 1 ? 20 : FILinp == 2 ? 50   : FILinp == 3 ? 100 : 0
maxvol       = FILinp == 1 ? 40 : FILinp == 2 ? 100  : FILinp == 3 ? 200 : 0
filter       = FILinp > 0 ? volatilityBreak(minvol, maxvol) : true



//SIGNALS ALGO



GGlength     = IN1 / timeframe.multiplier * 7
deviation    = IN2 * ta.stdev(close, GGlength)
higest       = ta.highest(close, GGlength)[1]
lowest       = ta.lowest (close, GGlength)[1]
TrandLine    = (higest + lowest) / 2
upper_band   = higest + deviation
lower_band   = lowest - deviation
is_bullish   = close >= TrandLine
is_bearish   = close <= TrandLine
trend_state  = 0
trend_state := is_bullish ? 1 : is_bearish ? -1 : nz(trend_state[1])
hig_ratio    =   (close - lower_band) / (upper_band - lower_band) * 500
low_ratio    = -((upper_band - close) / (upper_band - lower_band)) * 500
total_ratio  = hig_ratio + low_ratio
is_long      = ta.crossover (total_ratio, 100)
is_shor      = ta.crossunder(total_ratio, -100)

LONG = is_long and (ta.barssince(is_long or barstate.isfirst) > ta.barssince(is_shor) or ta.cum(is_long ? 1 : 0) == 0 and ta.cum(is_shor ? 1 : 0) == 0)[1]
SHOR = is_shor and (ta.barssince(is_long) < ta.barssince(is_shor or barstate.isfirst) or ta.cum(is_long ? 1 : 0) == 0 and ta.cum(is_shor ? 1 : 0) == 0)[1]

longX = barstate.isconfirmed and filter and LONG 
shorX = barstate.isconfirmed and filter and SHOR



//LIMIT TP SL



longPrice = ta.valuewhen(longX, close, 0)
shorPrice = ta.valuewhen(shorX, close, 0)

longTake1 = longPrice * (1 + TP1 / 100)
shorTake1 = shorPrice * (1 - TP1 / 100)
longTake2 = longPrice * (1 + TP2 / 100)
shorTake2 = shorPrice * (1 - TP2 / 100)
longTake3 = longPrice * (1 + TP3 / 100)
shorTake3 = shorPrice * (1 - TP3 / 100)
longTake4 = longPrice * (1 + TP4 / 100)
shorTake4 = shorPrice * (1 - TP4 / 100)
longStopT = TrandLine * (1 - SLT / 100)
shorStopT = TrandLine * (1 + SLT / 100)

longActua = ta.barssince(longX or barstate.isfirst) < ta.barssince(shorX or barstate.isfirst) 
shorActua = ta.barssince(longX or barstate.isfirst) > ta.barssince(shorX or barstate.isfirst) 

SLxLe  = (ta.barssince(longX) < ta.barssince(low  < longStopT and not longX or barstate.isfirst))[1]
SLxSe  = (ta.barssince(shorX) < ta.barssince(high > shorStopT and not shorX or barstate.isfirst))[1]
SLxLxQ = (low  < longStopT and not longX and SLxLe) or barstate.isfirst
SLxSxQ = (high > shorStopT and not shorX and SLxSe) or barstate.isfirst

nalongX = na(ta.barssince(longX )) ? 99999 : ta.barssince(longX)
nashorX = na(ta.barssince(shorX )) ? 99999 : ta.barssince(shorX)
naslL   = na(ta.barssince(SLxLxQ)) ? 99999 : ta.barssince(SLxLxQ)
naslS   = na(ta.barssince(SLxSxQ)) ? 99999 : ta.barssince(SLxSxQ)
longActuaQ = nalongX < naslL and nalongX < nashorX
shorActuaQ = nashorX < naslS and nalongX > nashorX


plot(math.round_to_mintick(TrandLine), color=longActua ? color.new(#089981, 0) : shorActua ? color.new(#f23645, 0) : na, style=plot.style_line, linewidth=3, title='Trend Line')

plot(TRtype == 'Standart' and longActua ? math.round_to_mintick(longTake1) : TRtype == 'Standart' and shorActua ? math.round_to_mintick(shorTake1) : na, color=longActua ? color.new(color.teal, 71) : color.new(color.red, 71), linewidth=1, style=plot.style_cross, title='Take Profit  ')
plot(TRtype == 'Standart' and longActua ? math.round_to_mintick(longTake2) : TRtype == 'Standart' and shorActua ? math.round_to_mintick(shorTake2) : na, color=longActua ? color.new(color.teal, 71) : color.new(color.red, 71), linewidth=1, style=plot.style_cross, title='Take Profit 2')
plot(TRtype == 'Standart' and longActua ? math.round_to_mintick(longTake3) : TRtype == 'Standart' and shorActua ? math.round_to_mintick(shorTake3) : na, color=longActua ? color.new(color.teal, 71) : color.new(color.red, 71), linewidth=1, style=plot.style_cross, title='Take Profit 3')
plot(TRtype == 'Standart' and longActua ? math.round_to_mintick(longTake4) : TRtype == 'Standart' and shorActua ? math.round_to_mintick(shorTake4) : na, color=longActua ? color.new(color.teal, 71) : color.new(color.red, 71), linewidth=1, style=plot.style_cross, title='Take Profit 4')
plot(TRtype == 'Standart' and longActua ? math.round_to_mintick(longStopT) : TRtype == 'Standart' and shorActua ? math.round_to_mintick(shorStopT) : na, color=color.new(color.gray, 100), linewidth=1, style=plot.style_cross, title='Trailing Stop Loss')



//PANEL CALCULATIONS



TP1Lx = not longX and high > longTake1 and longActuaQ[1] and (ta.barssince(longX or barstate.isfirst) < ta.barssince(not longX and high > longTake1 and longActuaQ[1] or barstate.isfirst))[1]                
TP2Lx = not longX and high > longTake2 and longActuaQ[1] and (ta.barssince(longX or barstate.isfirst) < ta.barssince(not longX and high > longTake2 and longActuaQ[1] or barstate.isfirst))[1]                
TP3Lx = not longX and high > longTake3 and longActuaQ[1] and (ta.barssince(longX or barstate.isfirst) < ta.barssince(not longX and high > longTake3 and longActuaQ[1] or barstate.isfirst))[1]                
TP4Lx = not longX and high > longTake4 and longActuaQ[1] and (ta.barssince(longX or barstate.isfirst) < ta.barssince(not longX and high > longTake4 and longActuaQ[1] or barstate.isfirst))[1]                
SLLLx = not longX and low  < longStopT and longActuaQ[1] and (ta.barssince(longX or barstate.isfirst) < ta.barssince(not longX and low  < longStopT and longActuaQ[1] or barstate.isfirst))[1] and not TP4Lx or (longX and close < longStopT)
    
TP1Sx = not shorX and low  < shorTake1 and shorActuaQ[1] and (ta.barssince(shorX or barstate.isfirst) < ta.barssince(not shorX and low  < shorTake1 and shorActuaQ[1] or barstate.isfirst))[1]
TP2Sx = not shorX and low  < shorTake2 and shorActuaQ[1] and (ta.barssince(shorX or barstate.isfirst) < ta.barssince(not shorX and low  < shorTake2 and shorActuaQ[1] or barstate.isfirst))[1]
TP3Sx = not shorX and low  < shorTake3 and shorActuaQ[1] and (ta.barssince(shorX or barstate.isfirst) < ta.barssince(not shorX and low  < shorTake3 and shorActuaQ[1] or barstate.isfirst))[1]
TP4Sx = not shorX and low  < shorTake4 and shorActuaQ[1] and (ta.barssince(shorX or barstate.isfirst) < ta.barssince(not shorX and low  < shorTake4 and shorActuaQ[1] or barstate.isfirst))[1]
SLLSx = not shorX and high > shorStopT and shorActuaQ[1] and (ta.barssince(shorX or barstate.isfirst) < ta.barssince(not shorX and high > shorStopT and shorActuaQ[1] or barstate.isfirst))[1] and not TP4Sx or (shorX and close > shorStopT)

TP1p = longActua ? math.round_to_mintick(longTake1) : shorActua ? math.round_to_mintick(shorTake1) : na
TP2p = longActua ? math.round_to_mintick(longTake2) : shorActua ? math.round_to_mintick(shorTake2) : na
TP3p = longActua ? math.round_to_mintick(longTake3) : shorActua ? math.round_to_mintick(shorTake3) : na
TP4p = longActua ? math.round_to_mintick(longTake4) : shorActua ? math.round_to_mintick(shorTake4) : na
SSLp = longActua ? math.round_to_mintick(longStopT) : shorActua ? math.round_to_mintick(shorStopT) : na

label l1 = na
label l2 = na
label l3 = na
label l4 = na
label l5 = na

if TP1Lx or TP1Sx
    l1 := label.new(bar_index, TP1p, color = color.gray, textcolor = na, style = label.style_square, size = size.auto)
if TP2Lx or TP2Sx
    l2 := label.new(bar_index, TP2p, color = color.gray, textcolor = na, style = label.style_square, size = size.auto)
if TP3Lx or TP3Sx
    l3 := label.new(bar_index, TP3p, color = color.gray, textcolor = na, style = label.style_square, size = size.auto)
if TP4Lx or TP4Sx
    l4 := label.new(bar_index, TP4p, color = color.gray, textcolor = na, style = label.style_square, size = size.auto)
if SLLLx or SLLSx
    l5 := label.new(bar_index, SSLp, color = color.red , textcolor = na, style = label.style_square, size = size.auto)

cumTP_F(TP, sig)=>
    resT = TP
    resP = resT / sig * 100
    [resP, resT]

cumLONG = ta.cum(longX and not barstate.isfirst ? 1 : 0)
cumSHOR = ta.cum(shorX and not barstate.isfirst ? 1 : 0)

[resTP1, resTP1T] = cumTP_F(ta.cum((TP1Lx or TP1Sx) ? 1 : 0), cumLONG + cumSHOR)
[resTP2, resTP2T] = cumTP_F(ta.cum((TP2Lx or TP2Sx) ? 1 : 0), cumLONG + cumSHOR)
[resTP3, resTP3T] = cumTP_F(ta.cum((TP3Lx or TP3Sx) ? 1 : 0), cumLONG + cumSHOR)
[resTP4, resTP4T] = cumTP_F(ta.cum((TP4Lx or TP4Sx) ? 1 : 0), cumLONG + cumSHOR)

t1e = ta.cum((TP1Lx or TP1Sx) ? 1 : 0)
t2e = ta.cum((TP2Lx or TP2Sx) ? 1 : 0)
t3e = ta.cum((TP3Lx or TP3Sx) ? 1 : 0)
t4e = ta.cum((TP4Lx or TP4Sx) ? 1 : 0)

cumSIG = cumLONG + cumSHOR

[resTP1_10, resTP1T_10] = cumTP_F(t1e - ta.valuewhen(longX or shorX, t1e, 9 ),     10)
[resTP2_10, resTP2T_10] = cumTP_F(t2e - ta.valuewhen(longX or shorX, t2e, 9 ),     10)
[resTP3_10, resTP3T_10] = cumTP_F(t3e - ta.valuewhen(longX or shorX, t3e, 9 ),     10)
[resTP4_10, resTP4T_10] = cumTP_F(t4e - ta.valuewhen(longX or shorX, t4e, 9 ),     10)

[resTP1_20, resTP1T_20] = cumTP_F(t1e - ta.valuewhen(longX or shorX, t1e, 19),     20)
[resTP2_20, resTP2T_20] = cumTP_F(t2e - ta.valuewhen(longX or shorX, t2e, 19),     20)
[resTP3_20, resTP3T_20] = cumTP_F(t3e - ta.valuewhen(longX or shorX, t3e, 19),     20)
[resTP4_20, resTP4T_20] = cumTP_F(t4e - ta.valuewhen(longX or shorX, t4e, 19),     20)


longXC = longX 
shorXC = shorX 
firsttradetime = (longXC or shorXC) and not (ta.barssince(barstate.isfirst) > ta.barssince(longXC or shorXC))[1]

cumL = 0
if longXC
    cumL := 1
cumLONGq = ta.cum(cumL)
cumS = 0
if shorXC
    cumS := 1
    
cumSHORq = ta.cum(cumS)
ATRlength = 10  //input(30, title="ATR Length")
PeriodLB = 50  //input(90, title="Period Look Back Length") 
atrpercent = ta.hma(ta.tr, ATRlength)
PercentageRank = ta.percentrank(atrpercent, PeriodLB)

mon = ta.valuewhen(firsttradetime, month(time), 0) < 10 ? '0' + str.tostring(ta.valuewhen(firsttradetime, month(time), 0), '#') : str.tostring(ta.valuewhen(firsttradetime, month(time), 0), '#')
day = ta.valuewhen(firsttradetime, dayofmonth(time), 0) < 10 ? '0' + str.tostring(ta.valuewhen(firsttradetime, dayofmonth(time), 0), '#') : str.tostring(ta.valuewhen(firsttradetime, dayofmonth(time), 0), '#')
yea = str.tostring(ta.valuewhen(firsttradetime, year, 0), '#')
   
cumPR_F2(TPxL, TPxS, SLxL, SLxS, TPvL, TPvS, SLvL, SLvS) =>

    float     pnl = 0
    var float prf = 0
    var float win = 0
    var float los = 0
    var float pos = 0

    prc = ta.valuewhen(longX or shorX, close, 0)
    if  TPxL 
        pnl  :=  math.abs(prc-TPvL[1])/prc * 100 * pos[1]
        pos  := 0
    if  TPxS
        pnl  :=  math.abs(prc-TPvS[1])/prc * 100 * pos[1]
        pos  := 0
    if  SLxL
        pnl  := (((longStopT / prc) - 1) *  100) * (longX ? 1 : pos[1]) //-math.abs(prc-SLvL[1])/prc * 100 * pos[1]
        pos  := 0
    if  SLxS
        pnl  := (((shorStopT / prc) - 1) * -100) * (shorX ? 1 : pos[1]) //-math.abs(prc-SLvS[1])/prc * 100 * pos[1]
        pos  := 0
    if  longX and not barstate.isfirst
        pnl  := (((close / prc[1]) - 1) * -100) * pos[1]
        pos  := 1
    if  shorX and not barstate.isfirst
        pnl  := (((close / prc[1]) - 1) *  100) * pos[1]
        pos  := 1
    prf  := ta.cum(pnl)
    win  := ta.cum(pnl >= pnl[1] ? pnl : 0)
    los  := ta.cum(pnl <  pnl[1] ? pnl : 0)

    [prf, win, los, pos]

[cumTP1, winTP1, losTP1, p1] = cumPR_F2(TP1Lx, TP1Sx, SLLLx, SLLSx, longTake1, shorTake1, longStopT, shorStopT)
[cumTP2, winTP2, losTP2, p2] = cumPR_F2(TP2Lx, TP2Sx, SLLLx, SLLSx, longTake2, shorTake2, longStopT, shorStopT)
[cumTP3, winTP3, losTP3, p3] = cumPR_F2(TP3Lx, TP3Sx, SLLLx, SLLSx, longTake3, shorTake3, longStopT, shorStopT)
[cumTP4, winTP4, losTP4, p4] = cumPR_F2(TP4Lx, TP4Sx, SLLLx, SLLSx, longTake4, shorTake4, longStopT, shorStopT)


var label lbl = na

if  PNtype == 'Mobile'
    labeltext = '📊GG-Bang Trade Statistics' + 
       '\n\n⚙️Settings preset: ' + PRtype + 
       '\n\nSelected Pair: 📍 ' + syminfo.root + ', ⏱TF: ' + timeframe.period + (timeframe.isminutes ? 'm' : timeframe.isseconds ? 's' : na) +
       '\n\n📅First trade: ' + yea + '-' + mon + '-' + day +
       '\n\n═════════════════════════════════' + 
       '\n💵💶💷💴Targets: ' + ' TP1 ' + ' TP2 ' + ' TP3 ' + ' TP4' +
       '\n═════════════════════════════════' + 
       '\nAccuracy (Last 10) ➤ ' + ' ' + (na(resTP1_10) ? str.tostring(math.round(resTP1), '#') : str.tostring(math.round(resTP1_10), '#')) + '% | ' +  (na(resTP2_10) ? str.tostring(math.round(resTP2), '#') : str.tostring(math.round(resTP2_10), '#')) + '% | ' + (na(resTP3_10) ? str.tostring(math.round(resTP3), '#') : str.tostring(math.round(resTP3_10), '#')) + '% | ' + (na(resTP4_10) ? str.tostring(math.round(resTP4), '#') : str.tostring(math.round(resTP4_10), '#')) + '%' +
       '\nAccuracy (Last 20) ➤ ' + ' ' + (na(resTP1_20) ? str.tostring(math.round(resTP1), '#') : str.tostring(math.round(resTP1_20), '#')) + '% | ' +  (na(resTP2_20) ? str.tostring(math.round(resTP2), '#') : str.tostring(math.round(resTP2_20), '#')) + '% | ' + (na(resTP3_20) ? str.tostring(math.round(resTP3), '#') : str.tostring(math.round(resTP3_20), '#')) + '% | ' + (na(resTP4_20) ? str.tostring(math.round(resTP4), '#') : str.tostring(math.round(resTP4_20), '#')) + '%' +
       '\nAccuracy (All) ➤ ' + ' '     + str.tostring(math.round(resTP1), '#') + '% | ' + str.tostring(math.round(resTP2), '#') + '% | ' + str.tostring(math.round(resTP3), '#') + '% | ' + str.tostring(math.round(resTP4), '#') + '%' +
       '\n═════════════════════════════════' + 
       '\nWinning ➤ ' + ' '      + str.tostring(resTP1T, '#') + '/' + str.tostring(cumSIG, '#') + ' | ' + str.tostring(resTP2T, '#') + '/' + str.tostring(cumSIG, '#') + ' | ' + str.tostring(resTP3T, '#') + '/' + str.tostring(cumSIG, '#') + ' | ' + str.tostring(resTP4T, '#') + '/' + str.tostring(cumSIG, '#') +
       '\nGross Profit ➤ ' + ' ' + str.tostring(winTP1, '#.#') + '% | ' + str.tostring(winTP2, '#.#') + '% | ' + str.tostring(winTP3, '#.#') + '% | ' + str.tostring(winTP4, '#.#') + '%' + 
       '\nGross Loss ➤ ' + ' '   + str.tostring(losTP1, '#.#') + '% | ' + str.tostring(losTP2, '#.#') + '% | ' + str.tostring(losTP3, '#.#') + '% | ' + str.tostring(losTP4, '#.#') + '%' + 
       '\nNet Profit ➤ ' + ' '   + str.tostring(cumTP1, '#.#') + '% | ' + str.tostring(cumTP2, '#.#') + '% | ' + str.tostring(cumTP3, '#.#') + '% | ' + str.tostring(cumTP4, '#.#') + '%' 


    if barstate.islast
        lbl := label.new(bar_index + 3, open, labeltext, xloc.bar_index, yloc.price, color.new(#0f3b6d, 0), label.style_label_left, color.white, size.normal, text.align_left)
        label.delete(lbl[1])

var table Table = table.new(position.middle_right , 60, 40, border_width = 1, border_color = color.new(#151515,0), frame_color= color.new(#000000,100), frame_width = 0)
text00 = '📊GG-Shot Trade Statistics' 
text01 = '⚙️Preset: ' + PRtype + ' 📅First trade: ' + yea + '-' + mon + '-' + day
text02 = 'Selected Pair: 📍 ' + syminfo.root + ' ⏱Timeframe: ' + timeframe.period + (timeframe.isminutes ? 'm' : timeframe.isseconds ? 's' : na)
text03 = 'Targets'
text13 = 'TP1'
text23 = 'TP2'
text33 = 'TP3'
text43 = 'TP4'
text04 = 'Accuracy\n (last 10)'
text05 = 'Accuracy\n (last 20)'
text06 = 'Accuracy\n (All trades)'
text14 = (na(resTP1_10) or cumSIG < 10 ? str.tostring(math.round(resTP1), '#') : str.tostring(math.round(resTP1_10), '#')) + '%'
text24 = (na(resTP2_10) or cumSIG < 10 ? str.tostring(math.round(resTP2), '#') : str.tostring(math.round(resTP2_10), '#')) + '%'
text34 = (na(resTP3_10) or cumSIG < 10 ? str.tostring(math.round(resTP3), '#') : str.tostring(math.round(resTP3_10), '#')) + '%'
text44 = (na(resTP4_10) or cumSIG < 10 ? str.tostring(math.round(resTP4), '#') : str.tostring(math.round(resTP4_10), '#')) + '%'
text15 = (na(resTP1_20) or cumSIG < 20 ? str.tostring(math.round(resTP1), '#') : str.tostring(math.round(resTP1_20), '#')) + '%'
text25 = (na(resTP2_20) or cumSIG < 20 ? str.tostring(math.round(resTP2), '#') : str.tostring(math.round(resTP2_20), '#')) + '%'
text35 = (na(resTP3_20) or cumSIG < 20 ? str.tostring(math.round(resTP3), '#') : str.tostring(math.round(resTP3_20), '#')) + '%'
text45 = (na(resTP4_20) or cumSIG < 20 ? str.tostring(math.round(resTP4), '#') : str.tostring(math.round(resTP4_20), '#')) + '%'
text16 = str.tostring(math.round(resTP1), '#') + '%'
text26 = str.tostring(math.round(resTP2), '#') + '%'
text36 = str.tostring(math.round(resTP3), '#') + '%'
text46 = str.tostring(math.round(resTP4), '#') + '%'

text07 = '📚Profit Panel (All Signals)'

text08 = 'Winning'
text18 = str.tostring(resTP1T, '#') + '/' + str.tostring(cumSIG, '#')
text28 = str.tostring(resTP2T, '#') + '/' + str.tostring(cumSIG, '#')
text38 = str.tostring(resTP3T, '#') + '/' + str.tostring(cumSIG, '#')
text48 = str.tostring(resTP4T, '#') + '/' + str.tostring(cumSIG, '#')

text09 = 'Gross Profit'
text19 = str.tostring(winTP1, '#.#') + '%'
text29 = str.tostring(winTP2, '#.#') + '%'
text39 = str.tostring(winTP3, '#.#') + '%'
text49 = str.tostring(winTP4, '#.#') + '%'

text010 = 'Gross Loss'
text110 = str.tostring(losTP1, '#.#') + '%'
text210 = str.tostring(losTP2, '#.#') + '%'
text310 = str.tostring(losTP3, '#.#') + '%'
text410 = str.tostring(losTP4, '#.#') + '%'

text011 = 'Net Profit'
text111 = str.tostring(cumTP1, '#.#') + '%'
text211 = str.tostring(cumTP2, '#.#') + '%'
text311 = str.tostring(cumTP3, '#.#') + '%'
text411 = str.tostring(cumTP4, '#.#') + '%'

if  PNtype == 'Desktop'
    table.cell(Table, 0, 0, text00, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 0, 1, text01, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 0, 2, text02, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)


    table.cell(Table, 0, 3, text03, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 1, 3, text13, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 2, 3, text23, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 3, 3, text33, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 4, 3, text43, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)


    table.cell(Table, 0, 4, text04, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 7, height =  7, text_size = size.normal)
    table.cell(Table, 1, 4, text14, bgcolor = (na(resTP1_10) or cumSIG < 10 ? resTP1 : resTP1_10) <= 40 ? color.new(#ff6139, 0) : (na(resTP1_10) or cumSIG < 10 ? resTP1 : resTP1_10) <= 60 ? color.new(#e6c90e, 0) : (na(resTP1_10) or cumSIG < 10 ? resTP1 : resTP1_10) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 2, 4, text24, bgcolor = (na(resTP2_10) or cumSIG < 10 ? resTP2 : resTP2_10) <= 40 ? color.new(#ff6139, 0) : (na(resTP2_10) or cumSIG < 10 ? resTP2 : resTP2_10) <= 60 ? color.new(#e6c90e, 0) : (na(resTP2_10) or cumSIG < 10 ? resTP2 : resTP2_10) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 3, 4, text34, bgcolor = (na(resTP3_10) or cumSIG < 10 ? resTP3 : resTP3_10) <= 40 ? color.new(#ff6139, 0) : (na(resTP3_10) or cumSIG < 10 ? resTP3 : resTP3_10) <= 60 ? color.new(#e6c90e, 0) : (na(resTP3_10) or cumSIG < 10 ? resTP3 : resTP3_10) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 4, 4, text44, bgcolor = (na(resTP4_10) or cumSIG < 10 ? resTP4 : resTP4_10) <= 40 ? color.new(#ff6139, 0) : (na(resTP4_10) or cumSIG < 10 ? resTP4 : resTP4_10) <= 60 ? color.new(#e6c90e, 0) : (na(resTP4_10) or cumSIG < 10 ? resTP4 : resTP4_10) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)

    table.cell(Table, 0, 5, text05, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 7, height =  7, text_size = size.normal)
    table.cell(Table, 1, 5, text15, bgcolor = (na(resTP1_20) or cumSIG < 20 ? resTP1 : resTP1_20) <= 40 ? color.new(#ff6139, 0) : (na(resTP1_20) or cumSIG < 20 ? resTP1 : resTP1_20) <= 60 ? color.new(#e6c90e, 0) : (na(resTP1_20) or cumSIG < 20 ? resTP1 : resTP1_20) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 2, 5, text25, bgcolor = (na(resTP2_20) or cumSIG < 20 ? resTP2 : resTP2_20) <= 40 ? color.new(#ff6139, 0) : (na(resTP2_20) or cumSIG < 20 ? resTP2 : resTP2_20) <= 60 ? color.new(#e6c90e, 0) : (na(resTP2_20) or cumSIG < 20 ? resTP2 : resTP2_20) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 3, 5, text35, bgcolor = (na(resTP3_20) or cumSIG < 20 ? resTP3 : resTP3_20) <= 40 ? color.new(#ff6139, 0) : (na(resTP3_20) or cumSIG < 20 ? resTP3 : resTP3_20) <= 60 ? color.new(#e6c90e, 0) : (na(resTP3_20) or cumSIG < 20 ? resTP3 : resTP3_20) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 4, 5, text45, bgcolor = (na(resTP4_20) or cumSIG < 20 ? resTP4 : resTP4_20) <= 40 ? color.new(#ff6139, 0) : (na(resTP4_20) or cumSIG < 20 ? resTP4 : resTP4_20) <= 60 ? color.new(#e6c90e, 0) : (na(resTP4_20) or cumSIG < 20 ? resTP4 : resTP4_20) < 90 ? color.new(#67e77a, 0) : color.new(#72fffa, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)

    table.cell(Table, 0, 6, text06, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 7, height =  7, text_size = size.normal)
    table.cell(Table, 1, 6, text16, bgcolor = resTP1 <= 40 ? color.new(#ff6139, 0) : resTP1 <= 60 ? color.new(#e6c90e, 0) : color.new(#67e77a, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 2, 6, text26, bgcolor = resTP2 <= 40 ? color.new(#ff6139, 0) : resTP2 <= 60 ? color.new(#e6c90e, 0) : color.new(#67e77a, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 3, 6, text36, bgcolor = resTP3 <= 40 ? color.new(#ff6139, 0) : resTP3 <= 60 ? color.new(#e6c90e, 0) : color.new(#67e77a, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)
    table.cell(Table, 4, 6, text46, bgcolor = resTP4 <= 40 ? color.new(#ff6139, 0) : resTP4 <= 60 ? color.new(#e6c90e, 0) : color.new(#67e77a, 0), text_color = color.new(color.black, 0), width = 5, height =  7, text_size = size.normal)


    table.cell(Table, 0, 7, text07, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 5, height =  7, text_size = size.normal)

    table.cell(Table, 0, 8, text08, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 7, height =  4, text_size = size.normal)
    table.cell(Table, 1, 8, text18, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 2, 8, text28, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 3, 8, text38, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 4, 8, text48, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)

    table.cell(Table, 0, 9, text09, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 7, height =  4, text_size = size.normal)
    table.cell(Table, 1, 9, text19, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 2, 9, text29, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 3, 9, text39, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 4, 9, text49, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)

    table.cell(Table, 0, 10, text010, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 7, height =  4, text_size = size.normal)
    table.cell(Table, 1, 10, text110, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 2, 10, text210, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 3, 10, text310, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 4, 10, text410, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)

    table.cell(Table, 0, 11, text011, bgcolor = color.new(#101d5e, 0), text_color = color.new(color.white, 0), width = 7, height =  4, text_size = size.normal)
    table.cell(Table, 1, 11, text111, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 2, 11, text211, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 3, 11, text311, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)
    table.cell(Table, 4, 11, text411, bgcolor = color.new(#2942bc, 0), text_color = color.new(color.white, 0), width = 5, height =  4, text_size = size.normal)

    table.merge_cells(Table, 0, 0, 4, 0)
    table.merge_cells(Table, 0, 1, 4, 1)
    table.merge_cells(Table, 0, 2, 4, 2)
    table.merge_cells(Table, 0, 7, 4, 7)



//ADVANCED TP ZONES



pl1 = plot(TRtype == 'Advanced' and not na(IN1) ? ta.highest(high[0], IN1) : na, color=color.new(color.green, 0), linewidth=2, style=plot.style_line, title='Trend Levels High')
pl2 = plot(TRtype == 'Advanced' and not na(IN1) ? ta.lowest (low [0], IN1) : na, color=color.new(color.red  , 0), linewidth=2, style=plot.style_line, title='Trend Levels Low' )
pl3 = plot(TRtype == 'Advanced' and not na(IN1) ? ta.highest(high[0], IN1) - math.abs(ta.highest(high[0], IN1) - ta.lowest(low[0], IN1)) / 4.237 : na, color=color.new(color.yellow, 0), linewidth=2, style=plot.style_line, title='Trend Levels')
pl4 = plot(TRtype == 'Advanced' and not na(IN1) ? ta.highest(high[0], IN1) - math.abs(ta.highest(high[0], IN1) - ta.lowest(low[0], IN1)) / 2.617 : na, color=color.new(color.orange, 0), linewidth=2, style=plot.style_line, title='Trend Levels')
pl5 = plot(TRtype == 'Advanced' and not na(IN1) ? ta.highest(high[0], IN1) - math.abs(ta.highest(high[0], IN1) - ta.lowest(low[0], IN1)) / 1.309 : na, color=color.new(#2962ff,      0), linewidth=2, style=plot.style_line, title='Trend Levels')



//SUPPORT RESISTANSE



pred_ranges(length, mult)=>
    var avg = close
    var hold_atr = 0.
    atr = nz(ta.atr(length)) * mult 
    avg := close - avg > atr ? avg + atr : 
      avg - close > atr ? avg - atr : 
      avg 
    hold_atr := avg != avg[1] ? atr / 2 : hold_atr   
    [avg + hold_atr * 2, avg + hold_atr, avg, avg - hold_atr, avg - hold_atr * 2]

[prR2, prR1, avg, prS1, prS2] = request.security(syminfo.tickerid, timeframe.period, pred_ranges(IN1, IN2))

plot(SUPinp ? prR2 : na, 'High Resistance', avg != avg[1] ? na : #f23645)
plot(SUPinp ? prR1 : na, 'Low Resistance' , avg != avg[1] ? na : #f23645)
plot(SUPinp ? avg  : na, 'Average'        , avg != avg[1] ? na : #5b9cf6)
plot(SUPinp ? prS1 : na, 'High Support'   , avg != avg[1] ? na : #089981)
plot(SUPinp ? prS2 : na, 'Low Support'    , avg != avg[1] ? na : #089981)



//READY TO SIGNAL AND SIGNAL



alertHIG   = higest - math.abs(higest - lowest) / 10
alertLOW   = lowest + math.abs(higest - lowest) / 10
Rlong      = ta.crossover (high, alertHIG)
Rshort     = ta.crossunder(low , alertLOW)
READYlong  = Rlong  and (ta.barssince(longX) > ta.barssince(shorX))[1] and not longX and (ta.barssince(Rlong  and (ta.barssince(longX) > ta.barssince(shorX))[1] and not longX) > IN1/10)[1]
READYshort = Rshort and (ta.barssince(longX) < ta.barssince(shorX))[1] and not shorX and (ta.barssince(Rshort and (ta.barssince(longX) < ta.barssince(shorX))[1] and not shorX) > IN1/10)[1]

plotshape(ALRinp and READYlong  ? low  : na, text='🟢Get ready to long' , textcolor=color.white, style=shape.labelup  , location=location.belowbar, color=color.new(color.teal, 15), size=size.small)
plotshape(ALRinp and READYshort ? high : na, text='🔴Get ready to short', textcolor=color.white, style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 15), size=size.small)

plotshape(longX ? low  : na, text='LONG' , textcolor=color.new(color.green, 0), style=shape.triangleup  , location=location.belowbar, color=color.new(color.green, 0), size=size.small, title='Alert Buy' )
plotshape(shorX ? high : na, text='SHORT', textcolor=color.new(color.red  , 0), style=shape.triangledown, location=location.abovebar, color=color.new(color.red  , 0), size=size.small, title='Alert Sell')



//DYNAMIC TP



lookback = 50
malen    = 20
avrange  = ta.sma(high - low, malen)
mult     = 1.5
rangethreshold = 0.5

TPS  = high - low >= avrange * mult and low  < ta.lowest (low [1], lookback) and close >= high - (high - low) * rangethreshold
TPL  = high - low >= avrange * mult and high > ta.highest(high[1], lookback) and close <= low  + (high - low) * rangethreshold

TP1L = TPL and longActua and                                                    ( ta.barssince(longX) < ta.barssince(TPL and longActua) )[1]
TP2L = TPL and longActua and ( ta.barssince(longX) > ta.barssince(TP1L))[1] and ( ta.barssince(longX) < ta.barssince(TPL and longActua and ( ta.barssince(longX) > ta.barssince(TP1L))[1]) )[1]
TP1S = TPS and shorActua and                                                    ( ta.barssince(shorX) < ta.barssince(TPS and shorActua) )[1]
TP2S = TPS and shorActua and ( ta.barssince(shorX) > ta.barssince(TP1S))[1] and ( ta.barssince(shorX) < ta.barssince(TPS and shorActua and ( ta.barssince(shorX) > ta.barssince(TP1S))[1]) )[1]

plotshape(DTPinp and TP1L, title = 'Dynamic TP Long'   , text = "TP ", textcolor = #00e676  , style = shape.triangledown, color = color.new(#255ffe, 0), location = location.abovebar, size = size.auto)
plotshape(DTPinp and TP1S, title = 'Dynamic TP Short'  , text = "TP ", textcolor = color.red, style = shape.triangleup  , color = color.new(#255ffe, 0), location = location.belowbar, size = size.auto)

plotshape(DTPinp and TP2L, title = 'Dynamic TP Long 2' , text = "TP2", textcolor = #00e676  , style = shape.triangledown, color = color.new(#255ffe, 0), location = location.abovebar, size = size.auto)
plotshape(DTPinp and TP2S, title = 'Dynamic TP Short 2', text = "TP2", textcolor = color.red, style = shape.triangleup  , color = color.new(#255ffe, 0), location = location.belowbar, size = size.auto)

fill(pl1, pl3, color.new(color.green, 90), title='Upper')
fill(pl2, pl5, color.new(color.red  , 90), title='Lower')



//OSCILLATOR



a         = 5
g         = 4
ll        = ta.lowest(low, a)
hh        = ta.highest(high, a)
diffx     = hh - ll
rdiff     = close - (hh + ll) / 2
avgrel    = ta.ema(ta.ema(rdiff, g), g)
avgdiff   = ta.ema(ta.ema(diffx, g), g)
SMI       = avgdiff != 0 ? avgrel / (avgdiff / 2) * 100 : 0
SMIsignal = ta.ema(SMI, g)

OSCsel    = SMI < SMI[1] and not (SMI < SMI[1])[1] and SMI >  50 and (OStype == 'By Trend' ? shorActua : true)
OSCbuy    = SMI > SMI[1] and not (SMI > SMI[1])[1] and SMI < -50 and (OStype == 'By Trend' ? longActua : true)

plotshape(OStype != 'Disable' and OSCsel ? true : na, style=shape.cross, color=color.new(color.red  , 0), location=location.abovebar, title='Bounce Up (Oscillator)'  , size=size.tiny)
plotshape(OStype != 'Disable' and OSCbuy ? true : na, style=shape.cross, color=color.new(color.green, 0), location=location.belowbar, title='Bounce Down (Oscillator)', size=size.tiny)



//ALERTS



alertcondition(longX, title = 'Alert Buy' , message = 'Signal type: Long \nLeverage: 5x \n\nEntry Targets: \n  1) {{close}} \n\nTake-Profit Targets: \n 1) {{plot("Take Profit  ")}} \n 2) {{plot("Take Profit 2")}} \n 3) {{plot("Take Profit 3")}} \n 4) {{plot("Take Profit 4")}} \n\nStop Targets: \n 1) {{plot("Trailing Stop Loss")}}')
alertcondition(shorX, title = 'Alert Sell', message = 'Signal type: Short \nLeverage: 5x \n\nEntry Targets: \n  1) {{close}} \n\nTake-Profit Targets: \n 1) {{plot("Take Profit  ")}} \n 2) {{plot("Take Profit 2")}} \n 3) {{plot("Take Profit 3")}} \n 4) {{plot("Take Profit 4")}} \n\nStop Targets: \n 1) {{plot("Trailing Stop Loss")}}')
alertcondition(OSCsel, "Bounce Down")
alertcondition(OSCbuy, "Bounce Up")
alertcondition(TP1L, "Dynamic TP Long")
alertcondition(TP2L, "Dynamic TP Long 2")
alertcondition(TP1S, "Dynamic TP Short")
alertcondition(TP2S, "Dynamic TP Short 2")
alertcondition(READYlong , "Get Ready Long")
alertcondition(READYshort, "Get Ready Short")